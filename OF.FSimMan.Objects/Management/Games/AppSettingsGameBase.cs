using System.Runtime.CompilerServices;

namespace OF.FSimMan.Management.Games
{
    public abstract class AppSettingsGameBase : AppSettingsBase
    {
        #region Properties
        internal Game _game;

        internal bool _isEnabled = false;
        public bool IsEnabled
        {
            get => _isEnabled;
            set => SetProperty(ref _isEnabled, value);
        }

        internal string _exeDirectoryPath = string.Empty;
        public string ExeDirectoryPath
        {
            get => _exeDirectoryPath;
            set => SetProperty(ref _exeDirectoryPath, value);
        }

        internal string _dataDirectoryPath = string.Empty;
        public string DataDirectoryPath
        {
            get => _dataDirectoryPath;
            set => SetProperty(ref _dataDirectoryPath, value);
        }

        public virtual bool IsAutogenerationPossible
        {
            get
            {
                if (!IsEnabled) return false;
                if (string.IsNullOrEmpty(ExeDirectoryPath)) return false;
                if (string.IsNullOrEmpty(DataDirectoryPath)) return false;

                InvokeModPackAutogenerationNowPossible();
                return true;
            }
        }

        internal bool _isAutogenerateModPackExecuted = false;
        public bool IsAutogeneratedModPackExecuted
        {
            get => _isAutogenerateModPackExecuted;
            set => SetProperty(ref _isAutogenerateModPackExecuted, value);
        }

        public bool IsFullyConfigured
        {
            get
            {
                if (!IsAutogenerationPossible) return false;
                if (!IsAutogeneratedModPackExecuted) return false;

                return true;
            }
        }
        #endregion

        #region Events
        public event EventHandler<AppSettingsModPackAutogenerationNowPossibleEventArgs>? ModPackAutogenerationNowPossible;
        #endregion

        #region Constructor
        public AppSettingsGameBase(Game game)
        {
            _game = game;
        }
        #endregion

        #region Methods PROTECTED
        protected override bool SetProperty<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
        {
            bool hasChanged = base.SetProperty(ref field, value, propertyName);
            if (hasChanged) OnPropertyChanged(nameof(IsFullyConfigured));
            return hasChanged;
        }
        #endregion

        #region Methods PRIVATE
        private void InvokeModPackAutogenerationNowPossible()
        {
            if (IsAutogeneratedModPackExecuted) return;

            ModPackAutogenerationNowPossible?.Invoke(this, new AppSettingsModPackAutogenerationNowPossibleEventArgs(_game));
        }
        #endregion
    }
}
