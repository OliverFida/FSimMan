using OF.Base.Objects;
using OF.FSimMan.Game;
using OF.FSimMan.Management.Games.Fs;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace OF.FSimMan.Management.Games
{
    [Table("GameSettings")]
    public abstract class GameSettingsDataBase : DataObject
    {
        #region Properties
        public Game Game { get; set; } = Game.None;
        public bool IsEnabled { get; set; } = false;
        public GameOrigin GameOrigin { get; set; } = GameOrigin.DvdWebsite;
        public bool IsAutogeneratedModPackExecuted { get; set; } = false;
        public string ExeDirectoryPath { get; set; } = string.Empty;
        public string DataDirectoryPath { get; set; } = string.Empty;


        [Required]
        public GameSettingsStartArgumentsData StartArguments { get; set; } = new GameSettingsStartArgumentsData();


        public int AppSettingsId { get; set; }

        [ForeignKey(nameof(AppSettingsId))]
        [Required]
        public AppSettingsData AppSettings { get; set; } = null!;
        #endregion

        #region Constructor
        protected GameSettingsDataBase() { }
        #endregion
    }

    public abstract class GameSettingsDataBase<T> : GameSettingsDataBase, IDataObject<T> where T : GameSettingsBase
    {
        #region Methods PUBLIC
        public virtual T FromData()
        {
            if (Game.Equals(Game.None)) MigrateGame();

            T temp = Activator.CreateInstance<T>();
            temp.Id = Id;
            temp._game = Game;
            temp._isEnabled = IsEnabled;
            temp._gameOrigin = GameOrigin;
            temp._isAutogeneratedModPackExecuted = IsAutogeneratedModPackExecuted;
            temp._exeDirectoryPath = ExeDirectoryPath;
            temp._dataDirectoryPath = DataDirectoryPath;
            temp._startArguments = StartArguments.FromData();
            return temp;
        }

        public virtual void ToData(T value)
        {
            Id = value.Id;
            Game = value._game;
            IsEnabled = value.IsEnabled;
            GameOrigin = value._gameOrigin;
            IsAutogeneratedModPackExecuted = value.IsAutogeneratedModPackExecuted;
            ExeDirectoryPath = value.ExeDirectoryPath;
            DataDirectoryPath = value.DataDirectoryPath;
            GameSettingsStartArgumentsData startArguments = new GameSettingsStartArgumentsData();
            startArguments.ToData(value.StartArguments);
            StartArguments = startArguments;
        }
        #endregion

        #region Methods PRIVATE
        private void MigrateGame()
        {
            IsAutogeneratedModPackExecuted = true;

            if (typeof(T).IsAssignableTo(typeof(GameSettingsFs22)))
            {
                Game = Game.FarmingSim22;
                return;
            }
            if (typeof(T).IsAssignableTo(typeof(GameSettingsFs25)))
            {
                Game = Game.FarmingSim25;
                return;
            }
        }
        #endregion
    }
}
