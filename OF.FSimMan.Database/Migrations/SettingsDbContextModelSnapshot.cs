// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OF.FSimMan.Database.Data;

#nullable disable

namespace OF.FSimMan.Database.Migrations
{
    [DbContext(typeof(SettingsDbContext))]
    partial class SettingsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("OF.FSimMan.Management.AppSettingsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationMode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSelectedView")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("OF.FSimMan.Management.Games.GameSettingsDataBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataDirectoryPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExeDirectoryPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Game")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameOrigin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAutogeneratedModPackExecuted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppSettingsId");

                    b.ToTable("GameSettings");

                    b.HasDiscriminator().HasValue("GameSettingsDataBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OF.FSimMan.Management.Games.GameSettingsStartArgumentsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableFrameLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableCheats")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SkipIntros")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSettingsId")
                        .IsUnique();

                    b.ToTable("GameStartArguments");
                });

            modelBuilder.Entity("OF.FSimMan.Management.Games.Fs.GameSettingsFs22Data", b =>
                {
                    b.HasBaseType("OF.FSimMan.Management.Games.GameSettingsDataBase");

                    b.ToTable("GameSettings");

                    b.HasDiscriminator().HasValue("GameSettingsFs22Data");
                });

            modelBuilder.Entity("OF.FSimMan.Management.Games.Fs.GameSettingsFs25Data", b =>
                {
                    b.HasBaseType("OF.FSimMan.Management.Games.GameSettingsDataBase");

                    b.ToTable("GameSettings");

                    b.HasDiscriminator().HasValue("GameSettingsFs25Data");
                });

            modelBuilder.Entity("OF.FSimMan.Management.Games.GameSettingsDataBase", b =>
                {
                    b.HasOne("OF.FSimMan.Management.AppSettingsData", "AppSettings")
                        .WithMany("GameSettings")
                        .HasForeignKey("AppSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppSettings");
                });

            modelBuilder.Entity("OF.FSimMan.Management.Games.GameSettingsStartArgumentsData", b =>
                {
                    b.HasOne("OF.FSimMan.Management.Games.GameSettingsDataBase", "GameSettings")
                        .WithOne("StartArguments")
                        .HasForeignKey("OF.FSimMan.Management.Games.GameSettingsStartArgumentsData", "GameSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSettings");
                });

            modelBuilder.Entity("OF.FSimMan.Management.AppSettingsData", b =>
                {
                    b.Navigation("GameSettings");
                });

            modelBuilder.Entity("OF.FSimMan.Management.Games.GameSettingsDataBase", b =>
                {
                    b.Navigation("StartArguments")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
